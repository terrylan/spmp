# SPMP-RAG v7 - Framework Specification
**Note to LLM**: This file contains the complete SPMP-RAG v7 framework specification. Parse the YAML-like content within (e.g., key-value pairs, nested lists) for detailed doctrines, principles, features, workflows, and examples. Use this as the primary source for generating software components, in conjunction with `SPMP-RAG-SRS.v*.md` (requirements), `SPMP-RAG-GRP.v*.md` (structure), and `SPMP-RAG-PRG.s*.md` (progress). **Requirement**: All four files are needed for a complete process. If the prompter uploads only this file or a subset, prompt: "Please upload the full set: `SPMP-RAG-FW.v7.md`, `SPMP-RAG-GRP.v*.md`, `SPMP-RAG-SRS.v*.md`, and `SPMP-RAG-PRG.s*.md`. If development is in progress, `SPMP-RAG-PRG.s*.md` is especially critical to track the current state."

title: "SPMP-RAG: Standard PHP-MVC-Principles"
version: "7"
language: "PHP"
architecture: "MVC"

core_idea: "AI interprets requirements, generates tailored files/folders, schema, tests, and deployment options; prompter deploys and tests for enhancements."

description: "A lean, adaptive PHP MVC framework where AI generates tailored software based on prompter requirements, optimized for specific hardware and user scale, with configurable features adhering to SOLID, DRY, KISS, YAGNI, IoC, DI, and a new Grounded-Practical principle."
scalability_note: "Scales from 1 user on 4GB Linux device to 50,000+ users on optimized cloud."

features:
  - "Lightweight"
  - "Secure"
  - "Extendable"
  - "Scalable"
  - "Adaptive"
  - "Lean"

use_cases:
  - "Task-Management"
  - "Notes-Taking"
  - "CMS"
  - "LMS"
  - "CRM"
  - "ERP"
  - "HRMS"
  - "PMS"
  - "WMS"
  - "SaaS"
  - "PIM"
  - "TMS"
  - "EAM"
  - "SCM"
  - "MES"
  - "IMS"

author: "Terrylan Manalansan"
last_updated: "2025-03-29"

doctrines:
  - tag: "@Doctrine-Simplicity"
    description: "Minimize complexity by generating only what’s needed."
  - tag: "@Doctrine-Security"
    description: "Ensure secure defaults with configurable enhancements."
  - tag: "@Doctrine-Extendability"
    description: "Support extensions via modular design."
  - tag: "@Doctrine-Lean"
    description: "Optimize resource usage with lightweight code."
  - tag: "@Doctrine-Zero-Dependencies"
    description: "No external packages—just pure PHP."
    note: "All core components self-contained in /core/."
  - tag: "@Doctrine-Management-System-Centric"
    description: "Tailored for systems like ERP, CRM, WMS with role-based workflows."
  - tag: "@Doctrine-Performance"
    description: "Lightweight design optimized for low-end systems and fast execution."
  - tag: "@Doctrine-Grounded-Practical"
    description: "Generate practical, context-aware solutions tailored to prompter needs, avoiding over-engineering."
    example:
      language: "PHP"
      snippet: |
        class FeatureToggle {
            public function isEnabled($feature) {
                return $config['features'][$feature] ?? false;
            }
        }
  - tag: "@Doctrine-Database-Flexibility"
    description: "Support seamless switching between lightweight (SQLite) and robust (MariaDB) databases to match prompter expertise and project needs."
  - tag: "@Doctrine-Incremental-Testable-Growth"
    description: "Build systems by creating the tree, listing files, and adding them in testable increments—core first, then critical batches—ensuring functionality toward the full vision."
    example:
      steps:
        - "Core: index.php, Router.php, Controller.php, Model.php, Container.php"
        - "Batch 1: LedgerModel.php, LedgerController.php"
        - "Batch 2: Auth.php, UserModel.php"

principles:
  - tag: "@Principle-Synchronized-Collaboration"
    description: "AI (coder) executes under prompter (PM) direction, aligning via verify state, target changes, ground updates."
    example:
      language: "PHP"
      snippet: |
        class TaskController extends Controller {
            public function add($pmInput) {
                $this->model->addTask($pmInput['title'], $pmInput['notes']);
            }
        }
  - tag: "@Principle-Align-Target-Ground"
    description: "Align via state verification, target specific changes, ground in existing code for modular feature injection."
  - tag: "@Principle-5-Core-Files"
    description: "Start with five essential files (public/index.php, core/Router.php, core/Controller.php, core/Model.php, core/Container.php) for routing, MVC, and dependency injection."
  - tag: "@Principle-1-Class-1-File"
    description: "Organize each class in its own file for clarity, maintainability, and adherence to SRP."
  - tag: "@Principle-Environment-Readiness"
    description: "Ensure the runtime environment is validated (e.g., PHP extensions, database setup) before execution to prevent setup failures."
  - tag: "@Principle-DB-Setup-First"
    description: "Initialize database schema before app execution to avoid runtime errors."
  - tag: "@SOLID-SRP"
    description: "Single Responsibility Principle: Each class has one responsibility."
  - tag: "@SOLID-OCP"
    description: "Open/Closed Principle: Classes open for extension, closed for modification."
  - tag: "@SOLID-LSP"
    description: "Liskov Substitution Principle: Subtypes replaceable without breaking functionality."
  - tag: "@SOLID-ISP"
    description: "Interface Segregation Principle: Specific interfaces over bloated ones."
  - tag: "@SOLID-DIP"
    description: "Dependency Inversion Principle: High-level modules depend on abstractions."
  - tag: "@Principle-DRY"
    description: "Don’t Repeat Yourself: Ensure code reuse."
  - tag: "@Principle-KISS"
    description: "Keep It Simple, Stupid: Generate straightforward code."
  - tag: "@Principle-YAGNI"
    description: "You Ain’t Gonna Need It: Avoid unnecessary features."
  - tag: "@Principle-IoC"
    description: "Inversion of Control: Manage dependencies via container."
  - tag: "@Principle-DI"
    description: "Dependency Injection: Inject dependencies."
  - tag: "@Principle-Sprint-Feature-Clustering"
    description: "Group complementary features into single sprints for efficiency and synergy, balancing complexity and testability."
    example:
      sprint: "Sprint 7"
      features: "Priority Levels + Categories/Tags"
      files: "TaskModel.php, task_form.php, tasks.php, TaskController.php, styles.css"

features:
  - tag: "@Feature-Task-Assignment"
    description: "Enables assigning tasks to users, with role-based access to user management and visibility of assigned tasks for assignees."
    example:
      file: "controllers/TaskController.php, models/TaskModel.php"
      usage: "Admin assigns task to a user, visible in task list for both creator and assignee."
    benefits:
      - "Facilitates collaboration across users."
      - "Supports role-based workflows."
  - tag: "@Feature-View-Inheritance"
    description: "Centralizes common HTML elements (e.g., header with username, navigation) into a single layout file, inherited by all views to reduce duplication and streamline updates."
    example:
      file: "core/View.php"
      usage: "Wraps view files with a shared header/footer containing user login info."
    benefits:
      - "Reduces repetitive HTML across views."
      - "Enables single-point updates for UI elements."
  - tag: "@Feature-Due-Dates-and-Reminders"
    description: "Adds due dates to tasks, with visual indicators for overdue tasks; reminders limited to UI where async processing is unavailable."
    example:
      file: "models/TaskModel.php, views/tasks.php"
      usage: "Task due on a specific date turns red if overdue and status isn’t complete."
    benefits:
      - "Improves time management for users."
      - "Adapts to low-spec environments."
  - tag: "@Feature-Dashboard-Overview"
    description: "Provides a summary view of tasks (e.g., counts by status) for quick user insight."
    example:
      file: "views/dashboard.php, controllers/DashboardController.php"
      usage: "Shows counts of pending and completed tasks on a dashboard."
    benefits:
      - "Enhances visibility of task statuses."
      - "Offers quick insight without detailed filtering."
  - tag: "@Feature-Search-and-Filter"
    description: "Allows searching tasks by title and filtering by status, assignee, or other fields."
    example:
      file: "models/TaskModel.php, views/tasks.php"
      usage: "Search by keyword or filter by assignee."
    benefits:
      - "Speeds up task navigation."
      - "Improves usability with dynamic queries."
  - tag: "@Feature-Task-Categories-Tags"
    description: "Adds categorization or tagging to tasks for better organization."
    example:
      file: "models/TaskModel.php, views/task_form.php"
      usage: "Tag task with a category, filter by tag."
    benefits:
      - "Enables flexible task grouping."
      - "Supports custom organization schemes."
  - tag: "@Feature-Priority-Levels"
    description: "Assigns priority levels to tasks, with visual cues for emphasis."
    example:
      file: "models/TaskModel.php, views/tasks.php"
      usage: "High-priority task highlighted in list."
    benefits:
      - "Highlights critical tasks."
      - "Enhances task prioritization."
  - tag: "@Feature-Progress-Tracking"
    description: "Tracks task completion progress with a visual indicator."
    example:
      file: "models/TaskModel.php, views/tasks.php"
      usage: "Task at 50% completion shows progress bar."
    benefits:
      - "Provides granular status tracking."
      - "Visualizes task advancement."
  - tag: "@Feature-Attachments"
    description: "Allows uploading files to tasks, stored locally."
    example:
      file: "models/AttachmentModel.php, controllers/AttachmentController.php"
      usage: "Attach a file to a task, viewable in task details."
    benefits:
      - "Enriches task context with supporting files."
      - "Supports documentation needs."
  - tag: "@Feature-Recurring-Tasks"
    description: "Enables tasks to repeat on a schedule with auto-generation on completion."
    example:
      file: "models/TaskModel.php, core/Recurrence.php"
      usage: "Daily task auto-creates next instance upon completion."
    benefits:
      - "Automates repetitive tasks."
      - "Reduces manual task recreation."
  - tag: "@Feature-Settings-Panel"
    description: "Provides an admin-only interface to configure system-wide settings, such as toggling features, setting defaults, or managing global preferences."
    example:
      file: "controllers/SettingsController.php, views/settings.php"
      usage: "Admin toggles a feature flag or sets a default value from a centralized panel."
    benefits:
      - "Centralizes system configuration for admins."
      - "Enhances flexibility without code changes."
  - tag: "@Feature-PWA-Support"
    description: "Enables Progressive Web App capabilities, allowing the application to be installed on devices, work offline, and provide a native-like experience, generated optionally based on prompter specification."
    example:
      file: "public/manifest.json, public/service-worker.js"
      usage: "User installs the app from the browser; it caches pages for offline access."
    benefits:
      - "Improves accessibility on mobile and desktop devices."
      - "Enhances user experience with offline functionality."
      - "Reduces dependency on constant server availability."
  - tag: "@Feature-Serverless-Deployment"
    description: "Adapts the project for serverless platforms (e.g., AWS Lambda, Vercel), optimizing for event-driven execution and scalability, generated optionally based on prompter selection."
    example:
      file: "deploy/serverless.yml, core/ServerlessAdapter.php"
      usage: "App runs as a serverless function, triggered by HTTP requests or events."
    benefits:
      - "Reduces operational costs with pay-per-use scaling."
      - "Simplifies deployment for high-traffic scenarios."
      - "Leverages cloud-native infrastructure."
  - tag: "@Feature-Modular-Monolith"
    description: "Enhances modularity within a single codebase, allowing feature isolation without transitioning to full microservices, supporting independent development and testing of modules."
    example:
      file: "core/ModuleManager.php, app/modules/TaskModule.php"
      usage: "Task-related logic encapsulated in a module, loaded dynamically by the app."
    benefits:
      - "Improves maintainability with clear module boundaries."
      - "Facilitates incremental refactoring toward microservices if needed."
      - "Balances simplicity of a monolith with modularity."

ai_workflow:
  steps:
    - step: "Requirement Analysis"
      description: "AI reads requirements.yml to extract app needs."
    - step: "Feature Selection"
      description: "AI applies weights from feature_catalog to select features."
    - step: "Fine-Tuning"
      description: "AI prompts prompter if requirements.yml lacks key fields or if weights are borderline (e.g., 45-55)."
      questions:
        - "Missing data_sensitivity: Should security features be added?"
        - "Feature weight near threshold (e.g., CAPTCHA at 45): Include it?"
    - step: "File and Folder Generation"
      description: "AI builds the project structure (controllers, models, views, core components, optional vmod, IoC container, authentication) based on selected features, following SOLID, DRY, KISS, and YAGNI."
    - step: "Schema Generation"
      description: "AI designs database schema based on use case and selected features (e.g., custom roles for RBAC), including optional authentication fields."
    - step: "Test Script Generation"
      description: "AI optionally creates unit and integration tests based on prompter choice, validating selected features and principle compliance."
    - step: "Deployment Options Generation"
      description: "AI offers deployment templates (e.g., bash, Docker) based on prompter selection, including initial setup."
    - step: "Prompter Deployment"
      description: "Prompter executes the chosen deployment method to set up the system."
    - step: "Testing and Enhancement"
      description: "Prompter tests the system; AI refines based on feedback."

ai_and_prompter_workflow:
  description: "Collaborative process between AI (coder) and prompter (PM) for building SPMP-RAG projects."
  steps:
    - step: "Design Full Folder Tree"
      description: "AI designs the complete folder and file tree based on prompter’s SPMP-RAG-SRS (software requirement specification) file and prompt."
      owner: "AI"
    - step: "Build Placeholder Structure"
      description: "Prompter creates the folder tree, placeholder files and database by using schema as a starting scaffold."
      owner: "Prompter"
    - step: "Map Tasks by Viability"
      description: "AI lists files in order of feature importance and testing viability for incremental development."
      owner: "AI"
      substeps:
        - "Start with 5 core files (public/index.php, core/Router.php, core/Controller.php, core/Model.php, core/Container.php) for a testable base."
        - "Add the next critical file or minimal batch testable with the core (e.g., Auth.php for authentication)."
        - "Include placeholder files for minor dependencies if needed."
        - "Iterate, adding files/batches incrementally, ensuring each step is testable and aligns with the final vision."
    - step: "Code and Test Increment"
      description: "Prompter codes the file or batch, tests functionality, and verifies it meets expectations."
      owner: "Prompter"
    - step: "Iterate or Proceed"
      description: "If satisfied, prompter requests the next file/batch from AI. If not, iterate with AI to refine the current increment."
      owner: "Prompter + AI"

installation:
  requirements:
    - "PHP 8.0+"
    - "MySQL/MariaDB 5.7+ or SQLite (auto-selected by AI based on scale)"
    - "Apache/Nginx"
  ai_generated_config:
    description: "AI produces a config.php tailored to hardware, user count, and selected features, adhering to Dependency Injection and Inversion of Control."
    example:
      language: "PHP"
      snippet: |
        $config = [
            'host' => 'localhost',
            'dbname' => 'spmp_db',
            'user' => 'root',
            'pass' => 'auto_generated_pass',
            'features' => [
                'cache' => 'none',  # Options: none, file, redis (prompter-selected)
                'async' => false,   # Optional Swoole support (prompter-selected)
                'rbac' => false,    # Optional Role-Based Access Control
                'force_password_change' => false,  # Configurable (default off for small apps)
                'forgot_password' => false  # Optional email-based reset
            ]
        ];

folder_structure:
  description: "AI dynamically generates the project tree based on requirements and selected features, adhering to SOLID/DRY/KISS/YAGNI/IoC/DI."
  template:
    - path: "/spmp_project"
      subdirs:
        - path: "app/"
          components:
            - "controllers/ # AI-generated logic (SRP, DRY), e.g., AuthController if auth enabled"
            - "models/ # AI-generated ORM with optional RBAC/User models (LSP)"
            - "views/ # AI-generated templates (KISS), e.g., login views if auth enabled"
        - path: "core/"
          components:
            - "Cache.php # Optional, configured caching (OCP, DRY)"
            - "DB.php # AI-configured database with optional auth support (DIP/DI)"
            - "Router.php # AI-configured routing (ISP)"
            - "Security.php # AI-enabled security based on selected features (SRP)"
            - "RBAC.php # Optional Role-Based Access Control"
            - "Container.php # IoC container for dependency management"
            - "Auth.php # Optional authentication logic"
        - path: "public/"
          components:
            - "index.php # AI-generated entry using IoC"
        - path: "tests/"
          components:
            - "generated_tests.php # Optional AI-created test suite"
        - path: "vmods/"  # Optional
          components:
            - "ModManager.php # Simplified plugin loader for extensions (OCP)"
        - "config.php # AI-generated settings with feature toggles"
        - "deploy/ # Optional deployment templates (e.g., deploy.sh, Dockerfile)"

security:
  description: "AI embeds configurable PHP security features based on use case and prompter selection, following SRP and DRY."
  features:
    - tag: "@CSRF-Protection"
      method: "Optional; AI injects Security.php with CSRF token logic if enabled."
    - tag: "@XSS-Prevention"
      method: "Default; AI applies input sanitization across forms."
    - tag: "@SQL-Injection"
      method: "Default; AI uses prepared statements and PDO in DB.php."
    - tag: "@Session-Security"
      method: "Optional; AI configures secure session handling if auth enabled."
    - tag: "@Password-Hashing"
      method: "Default; AI implements password_hash() if auth enabled."
    - tag: "@File-Upload-Security"
      method: "Optional; AI enforces checks if file uploads specified."
    - tag: "@Header-Security"
      method: "Optional; AI sets HTTP headers if public-facing app."
    - tag: "@Input-Validation"
      method: "Default; AI integrates basic validation, customizable."
    - tag: "@Error-Reporting"
      method: "Default; AI disables error display in production."
    - tag: "@Rate-Limiting"
      method: "Optional; AI adds throttling if high user count specified."

authentication:
  description: "AI optionally generates login features based on prompter choice, with configurable password change enforcement."
  features:
    - tag: "@Login"
      method: "Optional; AI generates login with session management if enabled."
      example:
        language: "PHP"
        snippet: |
          class Auth {
              private $db;
              public function __construct(DB $db) {
                  $this->db = $db;
              }
              public function login($username, $password) {
                  $user = $this->db->query("SELECT * FROM users WHERE username = ?", [$username])->fetch();
                  if ($user && password_verify($password, $user['password'])) {
                      session_start();
                      $_SESSION['user_id'] = $user['id'];
                      if ($user['force_password_change'] && $config['force_password_change']) {
                          header("Location: /change-password");
                          exit;
                      }
                      return true;
                  }
                  return false;
              }
          }
    - tag: "@Force-Password-Change"
      method: "Configurable; AI enforces password change if enabled in config."
    - tag: "@Change-Password"
      method: "Optional; AI provides password change if auth enabled."
    - tag: "@Forgot-Password"
      method: "Optional; AI implements token-based reset if email support specified."

rbac:
  description: "AI optionally implements Role-Based Access Control with custom roles defined by prompter, adhering to LSP."
  implementation: "AI generates RBAC.php with role checks if enabled, integrated with Security.php and Auth.php."

schema_example:
  description: "AI generates schema based on use case and selected features, keeping it simple (KISS) and necessary (YAGNI)."
  example:
    use_case: "Notes-Taking"
    sql: |
      CREATE TABLE users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(255) UNIQUE,
          password VARCHAR(255),  # Hashed if auth enabled
          role_id INT,  # Optional, linked to roles table if RBAC enabled
          force_password_change TINYINT(1) DEFAULT 0,  # Configurable
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE roles (  # Optional if RBAC enabled
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(255) UNIQUE,
          permissions TEXT
      );

      CREATE TABLE notes (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT,
          title VARCHAR(255),
          content TEXT,
          FOREIGN KEY (user_id) REFERENCES users(id)
      );

test_example:
  description: "AI optionally generates test scripts based on prompter choice, focusing on selected features."
  example:
    language: "PHP"
    snippet: |
      class AuthTest extends PHPUnit\Framework\TestCase {
          public function testLogin() {
              $auth = new Auth(new DBMock());
              $this->assertTrue($auth->login('test', 'pass'));  # Simplified for enabled auth
          }
      }

deployment_script_example:
  description: "AI generates optional deployment templates based on prompter selection."
  example:
    language: "Bash"
    snippet: |
      #!/bin/bash
      mkdir -p /var/www/spmp_project
      cp -r ./* /var/www/spmp_project
      mysql -u root -p < schema.sql
      chmod -R 755 /var/www/spmp_project

feature_catalog:
  description: "Features with weights determining inclusion based on requirements.yml fields."
  security:
    - name: "User Authentication"
      options: ["No", "Yes"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 50, "High": 100 }
        user_count: { "1-5": 20, "6-50": 50, "51+": 80 }
      dependencies: []
    - name: "Login Page"
      options: ["No", "Yes"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 40, "High": 90 }
        user_count: { "1-5": 10, "6-50": 40, "51+": 70 }
      dependencies: ["User Authentication"]
    - name: "Logout Button"
      options: ["No", "Yes"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 30, "High": 80 }
        user_count: { "1-5": 10, "6-50": 30, "51+": 60 }
      dependencies: ["User Authentication"]
    - name: "Auto Logout"
      options: ["No", "Yes"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 20, "High": 70 }
        access_context: { "Internal": 30, "Public": 50 }
      dependencies: ["User Authentication"]
    - name: "Change Password Options"
      options: ["None", "Admin-only", "User-initiated"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 40, "High": 90 }
        user_count: { "1-5": 10, "6-50": 40, "51+": 80 }
      dependencies: ["User Authentication"]
    - name: "Forgot Password Options"
      options: ["None", "Email-based", "Token-based"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 30, "High": 80 }
        access_context: { "Internal": 20, "Public": 60 }
      dependencies: ["User Authentication"]
    - name: "Two Factor Authentication"
      options: ["None", "SMS", "Authenticator"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 20, "High": 80 }
        access_context: { "Internal": 30, "Public": 70 }
      dependencies: ["User Authentication"]
    - name: "CAPTCHA"
      options: ["None", "On Login", "On Reset"]
      weights:
        access_context: { "Internal": 10, "Public": 90 }
        user_count: { "1-5": 0, "6-50": 30, "51+": 70 }
      dependencies: ["User Authentication"]
    - name: "GDPR Compliance"
      options: ["No", "Yes"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 40, "High": 80 }
        access_context: { "Internal": 20, "Public": 60 }
      dependencies: []
  deployment:
    - name: "Cloud Deployment"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 10, "6-50": 40, "51+": 80 }
        low_spec_support: { "Yes": 20, "No": 60 }
      dependencies: []
    - name: "Cloud Cost Estimates"
      options: ["No", "Yes"]
      weights:
        cloud_deployment: { "No": 0, "Yes": 80 }
      dependencies: ["Cloud Deployment"]
    - name: "Shared Hosting Deployment"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 40, "6-50": 60, "51+": 20 }
        low_spec_support: { "Yes": 70, "No": 30 }
      dependencies: []
    - name: "Local Server Deployment"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 50, "6-50": 40, "51+": 20 }
        low_spec_support: { "Yes": 60, "No": 30 }
      dependencies: []
    - name: "Low Spec Support"
      options: ["No", "Yes"]
      weights:
        hardware_constraints: { "None": 0, "2GB RAM": 80, "4GB RAM": 60 }
      dependencies: []
  functionality:
    - name: "APIs"
      options: ["No", "Yes"]
      weights:
        system_type: { "CMS": 40, "ERP": 60, "Bookkeeping Management System": 50 }
        user_count: { "1-5": 20, "6-50": 50, "51+": 70 }
      dependencies: []
    - name: "Multiple Languages"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 10, "6-50": 40, "51+": 80 }
        access_context: { "Internal": 20, "Public": 60 }
      dependencies: []
    - name: "Dark Theme"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 20, "6-50": 40, "51+": 60 }
      dependencies: []
    - name: "High Concurrency Support"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 10, "6-50": 50, "51+": 90 }
        max_response_time: { "100": 80, "500": 40, "1000": 20 }
      dependencies: []
    - name: "Role Based Access Control"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 10, "6-50": 50, "51+": 90 }
        data_sensitivity: { "Low": 10, "Medium": 40, "High": 80 }
      dependencies: ["User Authentication"]
    - name: "External API Integration"
      options: ["No", "Yes"]
      weights:
        system_type: { "CMS": 50, "ERP": 70, "Bookkeeping Management System": 40 }
        user_count: { "1-5": 20, "6-50": 50, "51+": 70 }
      dependencies: []
    - name: "Responsive Design"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 30, "6-50": 60, "51+": 90 }
        access_context: { "Internal": 40, "Public": 80 }
      dependencies: []
    - name: "Dashboard"
      options: ["No", "Yes"]
      weights:
        system_type: { "CMS": 80, "ERP": 90, "Bookkeeping Management System": 85 }
        user_count: { "1-5": 20, "6-50": 50, "51+": 80 }
      dependencies: []
    - name: "Caching"
      options: ["None", "File", "Redis"]
      weights:
        user_count: { "1-5": 10, "6-50": 50, "51+": 90 }
        max_response_time: { "100": 80, "500": 50, "1000": 20 }
      dependencies: []
    - name: "Existing System Integration"
      options: ["No", "Yes"]
      weights:
        system_type: { "CMS": 40, "ERP": 60, "Bookkeeping Management System": 50 }
        user_count: { "1-5": 20, "6-50": 40, "51+": 60 }
      dependencies: []
  design:
    - name: "Design Branding"
      options: ["No", "Yes"]
      weights:
        user_count: { "1-5": 20, "6-50": 40, "51+": 60 }
        access_context: { "Internal": 30, "Public": 70 }
      dependencies: []
    - name: "Color Palette"
      options: ["None", "Custom"]
      weights:
        design_branding: { "No": 0, "Yes": 80 }
      dependencies: ["Design Branding"]
  performance:
    - name: "Max Response Time Enforcement"
      options: ["No", "Yes"]
      weights:
        max_response_time: { "100": 90, "500": 60, "1000": 30 }
      dependencies: []
    - name: "Hardware Constraints Optimization"
      options: ["No", "Yes"]
      weights:
        hardware_constraints: { "None": 0, "2GB RAM": 90, "4GB RAM": 70 }
      dependencies: []
  # Original feature_catalog preserved below
    - name: "Login"
      options: ["None", "Basic", "Advanced"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 50, "High": 100 }
        user_scale: { "1-5": 20, "6-50": 50, "51+": 80 }
      dependencies: []
    - name: "2FA"
      options: ["None", "SMS", "Authenticator"]
      weights:
        data_sensitivity: { "Low": 0, "Medium": 20, "High": 80 }
        access_context: { "Internal": 30, "Public": 70 }
      dependencies: ["Login"]
    - name: "CAPTCHA"
      options: ["None", "On Login", "On Reset"]
      weights:
        access_context: { "Internal": 10, "Public": 90 }
        user_scale: { "1-5": 0, "6-50": 30, "51+": 70 }
      dependencies: ["Login"]
    - name: "Caching"
      options: ["None", "File", "Redis"]
      weights:
        user_scale: { "1-5": 10, "6-50": 60, "51+": 90 }
      dependencies: []

ai_guidelines:
  description: "Rules for AI to generate code and manage features in SPMP-RAG projects."
  rules:
    - "Use tools (e.g., X analysis, web search) only when explicitly requested by prompter."
    - "Leverage continuously updated knowledge—no strict cutoff."
    - "For feature selection from feature_catalog:"
      subrules:
        - "Calculate total weight for each feature by summing relevant requirement fields (e.g., data_sensitivity, user_count) in requirements.yml."
        - "Include feature if total weight >= 50; choose highest-weighted option if multiple exist."
        - "Respect dependencies (e.g., 2FA requires User Authentication)."
        - "Override weight-based decisions with explicit values from requirements.yml (e.g., 'two_factor_authentication: None')."
        - "Map numeric fields to ranges: user_count (1-5: low, 6-50: medium, 51+: high), max_response_time (100ms: fast, 500ms: medium, 1000ms: slow)."
    - "For large projects (e.g., Guardian Ledger), follow Incremental-Testable-Growth:"
      steps:
        - "Create the full folder tree upfront to define project scope."
        - "List all files to be created, mapping the complete structure."
        - "Arrange files by testing viability:"
          substeps:
            - "Start with 5 core files (public/index.php, core/Router.php, core/Controller.php, core/Model.php, core/Container.php) for a testable base."
            - "Add the next critical file or minimal batch testable with the core (e.g., authentication or ledger logic)."
            - "Iterate, adding files/batches incrementally, testing at each step until complete."
        - "Ensure each increment is functional, aligning with the final vision."


templates:
  srs_template:
    description: "Template for SPMP-RAG-SRS.v*.md to specify project requirements."
    example:
      content: |
        # SPMP-RAG - Software Requirement Specification
        **Note to LLM**: This file specifies project requirements. Parse the YAML-like content to determine the use case, scale, and features. Use with `SPMP-RAG-FW.v7.md`, `SPMP-RAG-GRP.v*.md`, and `SPMP-RAG-PRG.s*.md`.

        ```yaml
        version: "v1"
        project:
          name: "Example App"
          use_case: "Notes-Taking"
          user_count: 5
          data_sensitivity: "Low"
        features:
          authentication: "No"
          task_categories: "Yes"
        ```

  prg_template:
    description: "Template for SPMP-RAG-PRG.s*.md to track development progress."
    example:
      content: |
        # SPMP-RAG v7 - Development Progress
        **Note to LLM**: This file tracks the current state of the project. Use with `SPMP-RAG-FW.v7.md`, `SPMP-RAG-GRP.v*.md`, and `SPMP-RAG-SRS.v*.md` to continue progress.

        ```yaml
        sprint: 1
        project:
          name: "Example App"
          requirements_reference: "See SPMP-RAG-SRS.v*.md"
        folder_tree:
          - path: "/example_app"
            subdirs:
              - "app/controllers/"
              - "app/models/"
              - "core/"
              - "public/index.php"
        schema:
          - table: "tasks"
            fields:
              - "id: INT AUTO_INCREMENT PRIMARY KEY"
              - "title: VARCHAR(255)"
        pending_features:
          - sprint: 2
            features: ["@Feature-Task-Assignment"]
            files: ["controllers/TaskController.php"]
        next_steps:
          - "Generate Sprint 2 batch."
        ```

recommendations:
  - name: "Hardware Optimization"
    description: "AI tailors features to hardware with prompter input (YAGNI)."
  - name: "Scale Adaptation"
    description: "AI adjusts architecture for user count with configurable options (DRY, IoC)."
