# SPMP-RAG v8 - Framework Specification

title: "SPMP-RAG: Standard PHP-MVC-Principles Framework "
version: "8"
language: "PHP"
architecture: "MVC"
author: "Terrylan Manalansan"
last_updated: "2025-04-03"
related_files:
  - "SPMP-RAG-GRP.v*.md: Condensed Knowledge Graph"
  - "SPMP-RAG-SRS.v*.md: Software Requirement Specification"
  - "SPMP-RAG-PRG.s*.md: Plan and Development Progress"
  - "SPMP-RAG-TCS.v6.md: Folder Tree, File Codes, Schema"

core_idea: "AI generates tailored PHP MVC software from prompter requirements, optimizing for hardware and scale, with modular, testable growth."
short_description: "a Retrieval-Augmented Generation file for generating PHP/MVC projects with LLM"
description: "A lean PHP MVC framework adhering to SOLID, DRY, KISS, YAGNI, IoC, DI, and Grounded-Practical principles. Scales from 1 user (4GB Linux) to 50,000+ (cloud)."

use_cases: 
  - "Business Management (e.g., ERP, CRM, HRMS)"
  - "Content Systems (e.g., CMS, LMS, DMS)"
  - "Specialized Operations (e.g., HMS, WMS, TMS)"
  note: "Adapts to specific needs via Software Requirement Specification file."

doctrines:
  - tag: "@Doctrine-Simplicity"
    description: "Minimize complexity by generating only what’s needed."
  - tag: "@Doctrine-Security"
    description: "Ensure secure defaults with configurable enhancements."
  - tag: "@Doctrine-Extendability"
    description: "Support extensions via modular design."
  - tag: "@Doctrine-Lean"
    description: "Optimize resource usage with lightweight code."
  - tag: "@Doctrine-Zero-Dependencies"
    description: "No external packages—just pure PHP."
    note: "All core components self-contained in /core/."
  - tag: "@Doctrine-Management-System-Centric"
    description: "Tailored for systems like ERP, CRM, WMS with role-based workflows."
  - tag: "@Doctrine-Performance"
    description: "Lightweight design optimized for low-end systems and fast execution."
  - tag: "@Doctrine-Grounded-Practical"
    description: "Generate practical, context-aware solutions tailored to prompter needs, avoiding over-engineering."
    example:
      language: "PHP"
      snippet: |
        class FeatureToggle {
            public function isEnabled($feature) {
                return $config['features'][$feature] ?? false;
            }
        }
  - tag: "@Doctrine-Database-Flexibility"
    description: "Support seamless switching between lightweight (SQLite) and robust (MariaDB) databases to match prompter expertise and project needs."
  - tag: "@Doctrine-Incremental-Testable-Growth"
    description: "Build systems by creating the tree, listing files, and adding them in testable increments—core first, then critical batches—ensuring functionality toward the full vision."
    example:
      steps:
        - "Core: index.php, Router.php, Controller.php, Model.php, Container.php"
        - "Batch 1: LedgerModel.php, LedgerController.php"
        - "Batch 2: Auth.php, UserModel.php"
  - tag: "@Doctrine-Modular-Foundation"
    description: "Design systems with modularity as the cornerstone, enhancing modularity within a single codebase to allow feature isolation and support independent development/testing, enabling a seamless transition from monolith to microservices as scale demands."
    example:
      file: "core/ModuleManager.php, app/modules/TaskModule.php"
      usage: "Task-related logic encapsulated in a module, loaded dynamically, ready for extraction as a microservice."
  - tag: "@Doctrine-Continuous-Evolution"
    description: "The framework evolves with every project iteration"

principles:
  - "@Simplicity: Minimize complexity, generate only what’s needed."
  - "@Security: Embed secure defaults, configurable enhancements."
  - "@Modular-Foundation: Design for modularity, enabling monolith-to-microservices transition."
  - "@Grounded-Practical: Deliver context-aware, practical solutions."
  - "@Incremental-Testable-Growth: Build in testable increments (core first, then batches)."
  - "@Adaptive-Modular-Scale: Start with modular monolith, scale to microservices as needed."
  - "@Zero-Dependencies: Pure PHP, no external packages."
  - "@SOLID/DRY/KISS/YAGNI/IoC/DI: Standard practices for clean, maintainable code."
  - "@Adaptive-Framework-Growth: The framework grows adaptively based on real-world usage"
  - "@Intelligible: Code is segmented with clear comments, and instructions are broken into labeled sections for easy application and for prompter learning.

features:
  - "@Snippet-Based-Generation: AI outputs JSON(SPMP-RAG-SMA.json) with snippet IDs for php assembly."
  - "@Snippet-Modular-Assembly: generator.php in the main project folder builds the project folders, files and schema acording to SPMP-RAG-SMA.json"
  - "@Task-Assignment: Role-based task assignment and visibility."
  - "@Due-Dates-and-Reminders: Visual due date tracking."
  - "@Dashboard-Overview: Summary of task statuses."
  - "@Phlux-Integration: Optional real-time UI updates via JavaScript."
  - "@Modular-Monolith: Isolated features in a single codebase."
  - "@Microservices-Transition: Extract modules for scale."
  note: "Selected dynamically from requirements.yml; weights in feature_catalog."

workflow:
  - "Analyze: AI parses requirements.yml for scale, features, and architecture."
  - "Generate: AI outputs YAML with full structure, schema, and snippets."
  - "Build: Prompter sets up tree and placeholders from YAML."
  - "Iterate: AI provides files incrementally (core first), prompter codes/tests."
  - "Refine: AI adjusts based on feedback, plans microservices if scale > 50 users."

requirements:
  - "PHP 8.0+, MySQL/MariaDB or SQLite, Apache/Nginx"
config: "AI generates config.php tailored to hardware and features."

folder_structure:
  - "/project_root"
    - "app/ # Controllers, models, views, modules"
    - "core/ # Router, DB, Container, etc."
    - "public/ # index.php, optional phlux.min.js"
    - "config.php # AI-generated settings"
    - "deploy/ # Optional templates"
    - "generator.php"
    - "SPMP-RAG-SMA.json"
  note: "Adapts to features and scale."

security:
  description: "AI embeds configurable PHP security features based on use case and prompter selection, following SRP and DRY."
  features:
    - tag: "@CSRF-Protection"
      method: "Optional; AI injects Security.php with CSRF token logic if enabled."
    - tag: "@XSS-Prevention"
      method: "Default; AI applies input sanitization across forms."
    - tag: "@SQL-Injection"
      method: "Default; AI uses prepared statements and PDO in DB.php."
    - tag: "@Session-Security"
      method: "Optional; AI configures secure session handling if auth enabled."
    - tag: "@Password-Hashing"
      method: "Default; AI implements password_hash() if auth enabled."
    - tag: "@File-Upload-Security"
      method: "Optional; AI enforces checks if file uploads specified."
    - tag: "@Header-Security"
      method: "Optional; AI sets HTTP headers if public-facing app."
    - tag: "@Input-Validation"
      method: "Default; AI integrates basic validation, customizable."
    - tag: "@Error-Reporting"
      method: "Default; AI disables error display in production."
    - tag: "@Rate-Limiting"
      method: "Optional; AI adds throttling if high user count specified."

authentication:
  description: "AI optionally generates login features based on prompter choice, with configurable password change enforcement."
  features:
    - tag: "@Login"
      method: "Optional; AI generates login with session management if enabled."
      example:
        language: "PHP"
        snippet: |
          class Auth {
              private $db;
              public function __construct(DB $db) {
                  $this->db = $db;
              }
              public function login($username, $password) {
                  $user = $this->db->query("SELECT * FROM users WHERE username = ?", [$username])->fetch();
                  if ($user && password_verify($password, $user['password'])) {
                      session_start();
                      $_SESSION['user_id'] = $user['id'];
                      if ($user['force_password_change'] && $config['force_password_change']) {
                          header("Location: /change-password");
                          exit;
                      }
                      return true;
                  }
                  return false;
              }
          }
    - tag: "@Force-Password-Change"
      method: "Configurable; AI enforces password change if enabled in config."
    - tag: "@Change-Password"
      method: "Optional; AI provides password change if auth enabled."
    - tag: "@Forgot-Password"
      method: "Optional; AI implements token-based reset if email support specified."

rbac:
  description: "AI optionally implements Role-Based Access Control with custom roles defined by prompter, adhering to LSP."
  implementation: "AI generates RBAC.php with role checks if enabled, integrated with Security.php and Auth.php."

schema_example:
  description: "AI includes schema in the YAML output for one-pass generation."
  example:
    use_case: "Hello World"
    sql: |
      CREATE TABLE messages (
          id INT AUTO_INCREMENT PRIMARY KEY,
          content VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

test_example:
  description: "AI optionally generates test scripts based on prompter choice, focusing on selected features."
  example:
    language: "PHP"
    snippet: |
      class AuthTest extends PHPUnit\Framework\TestCase {
          public function testLogin() {
              $auth = new Auth(new DBMock());
              $this->assertTrue($auth->login('test', 'pass'));  # Simplified for enabled auth
          }
      }

feature_catalog:
  - "Authentication: Weights by data_sensitivity, user_count."
  - "Caching: Options (None, File, Redis), weights by user_count."
  - "Phlux Integration: Weights by interactivity, user_count."
  note: "Full weights in requirements.yml; include if total >= 50."

ai_guidelines:
  description: "Rules for AI to generate code and manage features in SPMP-RAG projects."
  rules:
    - "Use tools (e.g., X analysis, web search) only when explicitly requested by prompter."
    - "Leverage continuously updated knowledge—no strict cutoff."
    - "For feature selection from feature_catalog:"
      subrules:
        - "Calculate total weight for each feature by summing relevant requirement fields (e.g., data_sensitivity, user_count) in requirements.yml."
        - "Include Phlux if total weight >= 50, generating public/phlux.min.js and public/app.js."
        - "Ensure Phlux relies on controller endpoints (e.g., /load-posts) rather than direct API files."
        - "Include feature if total weight >= 50; choose highest-weighted option if multiple exist."
        - "Respect dependencies (e.g., 2FA requires User Authentication)."
        - "Override weight-based decisions with explicit values from requirements.yml (e.g., 'two_factor_authentication: None')."
        - "Map numeric fields to ranges: user_count (1-5: low, 6-50: medium, 51+: high), max_response_time (100ms: fast, 500ms: medium, 1000ms: slow)."
    - "For large projects (e.g., Guardian Ledger), follow Incremental-Testable-Growth:"
      steps:
        - "Create the full folder tree upfront to define project scope."
        - "List all files to be created, mapping the complete structure."
        - "Arrange files by testing viability:"
          substeps:
            - "Start with 5 core files (public/index.php, core/Router.php, core/Controller.php, core/Model.php, core/Container.php) for a testable base."
            - "Add the next critical file or minimal batch testable with the core (e.g., authentication or ledger logic)."
            - "Iterate, adding files/batches incrementally, testing at each step until complete."
        - "Ensure each increment is functional, aligning with the final vision."

templates:
  srs_template:
    description: "Template for SPMP-RAG-SRS.yml to specify project requirements."
    example:
      content: |
        # SPMP-RAG - Software Requirement Specification
        **Note to LLM**: This file specifies project requirements. Parse the YAML-like content to determine the use case, scale, and features. Use with `SPMP-RAG-FW.v8.yml`, `SPMP-RAG-GRP.v*.yml`, and `SPMP-RAG-PRG.s*.yml`.

        ```yaml
        version: 1
        project:
          name: "Example App"
          use_case: "Notes-Taking"
          user_count: 5
          data_sensitivity: "Low"
          interactivity: "High"  # Added to trigger Phlux
        features:
          authentication: "No"
          task_categories: "Yes"
          phlux_integration: "Yes"  # Explicit override
        ```

recommendations:
  - name: "Framework Evolution"
    description: "AI analyzes project outcomes to recommend updates to the framework, ensuring continuous improvement."
  - name: "Hardware Optimization"
    description: "AI tailors features to hardware with prompter input (YAGNI)."
  - name: "Scale Adaptation"
    description: "AI adjusts architecture for user count with configurable options (DRY, IoC)."
  - name: "Scale-Adaptive Architecture"
    description: "AI applies @Principle-Adaptive-Modular-Scale to tailor the architecture, starting with a modular monolith for micro/small businesses (1-50 users) and recommending microservices for medium businesses (51-250 users) based on prompter input."
